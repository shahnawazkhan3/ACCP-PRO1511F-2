======================Services===========

A service is a component that runs in the background to perform long-running operations without needing to interact with the user and 
it works even if application is destroyed. A service can essentially take 


1)	Started

		A service is started when an application component, such as an activity, 
starts it by calling startService(). Once started, a service can run in the background indefinitely,
 even if the component that started it is destroyed.

2)	Bound

		A service is bound when an application component binds to it by calling bindService().
 A bound service offers a client-server interface that allows components to interact with the service, 
send requests, get results, and even do so across processes with interprocess communication (IPC).


A service has life cycle callback methods that you can implement to monitor changes 
in the service's state and you can perform work at the appropriate stage. 
The following diagram on the left shows the life cycle when the service is created with startService() and
 the diagram on the right shows the life cycle when the service is created with bindService():


============unbond service=============

startService()  => onCREAT() => onStart() => service running =>  (this service stop no callback ) => destroy()


=============bond sercvice ========

tartService()  => onCREAT() =>onbind() => (client interact with service)=>unbind() =>rebind() =destroy()


To create an service, you create a Java class that extends the
 Service base class or one of its existing subclasses. The Service base class defines various callback methods and the most important are given below. 
You don't need to implement all the callbacks methods


==================Callback & Description===============


1	onStartCommand()

		The system calls this method when another component, such as an activity, requests that the service be started, by calling startService(). If you implement this method, it is your responsibility to stop the service when its work is done, by calling stopSelf() or stopService() methods.

2	onBind()

		The system calls this method when another component wants to bind with the service by calling bindService(). If you implement this method, you must provide an interface that clients use to communicate with the service, by returning an IBinder object. You must always implement this method, but if you don't want to allow binding, then you should return null.

3	onUnbind()

		The system calls this method when all clients have disconnected from a particular interface published by the service.

4	onRebind()

		The system calls this method when new clients have connected to the service, after it had previously been notified that all had disconnected in its onUnbind(Intent).

5	onCreate()

		The system calls this method when the service is first created using onStartCommand() or onBind(). This call is required to perform one-time set-up.

6	onDestroy()

		The system calls this method when the service is no longer used and is being destroyed. 
Your service should implement this to clean up any resources such as threads, registered listeners, receivers, 
etc.

=================mainActivity ==============

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="com.zaaviyah.alpha_service_1_2_18.MainActivity">


    <Button
        android:id="@+id/btStart"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_centerHorizontal="true"
        android:layout_centerVertical="true"
        android:onClick="startService"
        android:text="start service"
        android:textSize="22dp" />

    <Button
        android:id="@+id/btStopSERVICE"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@+id/btStart"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="23dp"
        android:onClick="stopService"
        android:text="Stop Service"
        android:textSize="22dp" />
</RelativeLayout>


========== mainActivity.java==========

package com.zaaviyah.alpha_service_1_2_18;

import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;

public class MainActivity extends AppCompatActivity {
    String msg ="ANDROID";


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Log.d(msg, "The onCreate() event");
    }

    public void startService(View view) {
        startService(new Intent(getBaseContext(), MyService.class));
    }

    // Method to stop the service
    public void stopService(View view) {
        stopService(new Intent(getBaseContext(), MyService.class));
    }
}



===============MyService.java============


package com.zaaviyah.alpha_service_1_2_18;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.support.annotation.Nullable;
import android.widget.Toast;

/**
 * Created by pakistan laptop on 2/1/2018.
 */

public class MyService extends Service {

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        // Let it continue running until it is stopped.
        Toast.makeText(this, "Service Started", Toast.LENGTH_LONG).show();
        return START_STICKY;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Toast.makeText(this, "Service Destroyed", Toast.LENGTH_LONG).show();
    }
}



==================manifac.java=======

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.zaaviyah.alpha_service_1_2_18">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <service android:name=".MyService" />
    </application>

</manifest>




